---
title: "Mini-Project #01: Uncovering and Exploring the Most Popular Programming on Netflix"
author: "Nusrat Akter"
date: "`r Sys.Date()`"
format: 
  html: 
    theme: journal
    toc: true
    toc-depth: 3
    code-fold: true
    code-summary: "Show code"
    embed-resources: true
editor: visual
execute: 
  warning: false
  message: false
  echo: true
---



# **Executive Summary**
*Netflix is a global streaming powerhouse creating high-quality, binge-worthy content that captivates audiences worldwide. As part of the Public Relations team, I analyze Top 10 viewership data to uncover trending hits, celebrate Netflix's biggest successes, and tell stories about its global impact.*

# **Data Acquisition**
In order to acquire the latest Netflix Top 10 data, we ran the following code to get the Global Top 10 and Country-wide Top 10 data sets.
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true
if(!dir.exists(file.path("data", "mp01"))){
    dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                  destfile=GLOBAL_TOP_10_FILENAME)
}

COUNTRY_TOP_10_FILENAME <- file.path("data", "mp01", "country_top10_alltime.csv")

if(!file.exists(COUNTRY_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv", 
                  destfile=COUNTRY_TOP_10_FILENAME)
}
```

# **Data Import and Preparation**
After acquiring the data, we need to clean it up a bit so it has a suitable format. To do so, we downloaded the following code using the *str()* and *glimpse()* functions for both global and country data sets. We also ensured that the *N/A* values are read as *NA* values using the following codes:
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true
if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)

GLOBAL_TOP_10 <- read_tsv(GLOBAL_TOP_10_FILENAME)
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true
# changing "N/A" strings into NA values
GLOBAL_TOP_10 <- GLOBAL_TOP_10 |>
    mutate(season_title = if_else(season_title == "N/A", NA, season_title))

# changing "N/A" strings to NA values
COUNTRY_TOP_10 <- read_tsv(COUNTRY_TOP_10_FILENAME, na = c("N/A"))
```

# **Initial Data Exploration**
After gathering the data, we formatted it in order to create summarized data sets and descriptive statistics. Out of the four data sets generated, the last one was correctly formatted using the following codes below:
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true


library(DT)
GLOBAL_TOP_10 |> 
  head(n=20) |>
  datatable(options=list(searching=FALSE, info=FALSE))
library(stringr)
format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

GLOBAL_TOP_10 |> 
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```

```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

GLOBAL_TOP_10 |> 
    select(-season_title) |>
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```


```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

GLOBAL_TOP_10 |> 
    mutate(`runtime_(minutes)` = round(60 * runtime)) |>
    select(-season_title, 
           -runtime) |>
    format_titles() |>
    head(n=20) |>
    datatable(options=list(searching=FALSE, info=FALSE)) |>
    formatRound(c('Weekly Hours Viewed', 'Weekly Views'))
```


# **Exploratory Data Analysis**

## *Netflix's Reach Around The Globe*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true
country_n <- COUNTRY_TOP_10 |>
  distinct(country_name) |>
  nrow()
```
Netflix operates in **`r n_distinct(COUNTRY_TOP_10$country_name)`** different countries.

## *Longest-Running Non-English Netflix Film in the Global Top 10*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

# Non-English film with most cumulative weeks
top_nonenglish_film <- GLOBAL_TOP_10 |>
  filter(category == "Films (Non-English)") |>
  group_by(show_title) |>
  summarise(cumulative_weeks = max(cumulative_weeks_in_top_10, na.rm = TRUE), .groups = "drop") |>
  arrange(desc(cumulative_weeks)) |>
  slice_head(n = 1)
```
The longest running Non-English Film in the Global Top 10 is **`r top_nonenglish_film$show_title`** and ran for **`r top_nonenglish_film$cumulative_weeks`** weeks.

## *Longest Film in the Netflix Global Top 10*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

# Longest Film in Global Top 10
longest_film <- GLOBAL_TOP_10 |> 
  filter(category %in% c("Films (English)", "Films (Non-English)")) |> 
  mutate(runtime_minutes = runtime * 60) |> 
  slice_max(runtime_minutes, n = 1, with_ties = FALSE)
```
The longest film to ever appear in Netflix's global Top 10 is **`r longest_film$show_title`** with a run time of **`r longest_film$runtime_minutes`** minutes. 

## *Total Hours of Global Viewership in the Four Categories*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

library(dplyr)
library(scales)
library(DT)

GLOBAL_TOP_10 |>
  group_by(category, show_title) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") |>
  group_by(category) |>
  slice_max(total_hours, n = 1, with_ties = FALSE) |>
  ungroup() |>
  mutate(total_hours = comma(total_hours)) |>
  rename(
    "Category" = category,
    "Show Title" = show_title,
    "Total Hours" = total_hours
  ) |> 
  datatable(
    options = list(searching = FALSE, info = FALSE),
    caption = "Total Hours of Global Viewership In Four Categories",
    rownames = FALSE
  )

top_by_category <- GLOBAL_TOP_10 |>
  group_by(category, show_title) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") |>
  group_by(category) |>
  slice_max(total_hours, n = 1, with_ties = FALSE) |>
  ungroup()
```
In the TV shows aspect, *`r filter(top_by_category, category == "TV (Non-English)")$show_title`* had **`r format(filter(top_by_category, category == "TV (Non-English)")$total_hours, big.mark = ",", scientific = FALSE)`** hours of global viewership while *`r filter(top_by_category, category == "TV (English)")$show_title`* had **`r format(filter(top_by_category, category == "TV (English)")$total_hours, big.mark = ",", scientific = FALSE)`** hours. Regarding films, *`r filter(top_by_category, category == "Films (English)")$show_title`*, an English Film, had **`r format(filter(top_by_category, category == "Films (English)")$total_hours, big.mark = ",", scientific = FALSE)`** total hours. Closely followed was the Non-English Film, *`r filter(top_by_category, category == "Films (Non-English)")$show_title`*, with **`r format(filter(top_by_category, category == "Films (Non-English)")$total_hours, big.mark = ",", scientific = FALSE)`** hours. 


## *Longest-Running TV Show in a Countryâ€™s Top 10*
```{r include=TRUE}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

longest_running_top_10 <- COUNTRY_TOP_10 |> 
 filter(str_detect(category, "TV")) |> 
 group_by(country_name, show_title) |> 
 summarise(max_weeks = max(cumulative_weeks_in_top_10, na.rm = TRUE), .groups = "drop") |> 
 slice_max(max_weeks, n = 1, with_ties = TRUE)
```
In **`r longest_running_top_10$country_name`**, the Netflix original series **`r longest_running_top_10$show_title`** was the longest running TV-show in the Country's Top 10 for **`r longest_running_top_10$max_weeks`** weeks. 

## *Country with Less Than 200 Weeks of Netflix Service*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

library(dplyr)
library(DT)

less_than_200 <- COUNTRY_TOP_10 |> 
  count(country_name, wt = n_distinct(week), name = "Number of Weeks") |> 
  filter(`Number of Weeks` < 200) |> 
  rename("Country Name" = country_name)
datatable(
  less_than_200,
  options = list(
    searching = FALSE,
    info = FALSE,
    pageLength = 10
  ),
  caption = "Countries with Less Than 200 Weeks in Top 10"
)

# Isolate Russia
russia_name <- filter(less_than_200, `Country Name` == "Russia")$'Country Name'

# Isolate Number of Weeks for Russia
russia_weeks <- COUNTRY_TOP_10 |> 
  filter(country_name == "Russia") |> 
  summarise(weeks = n_distinct(week)) |> 
  pull(weeks)
```
**`r russia_name`** reported a total of **`r russia_weeks`** weeks, which is less than the 200 weeks of service Netflix provides. Netflix ceased operations in **February 27, 2025**. 

## *Squid Game's Total Viewership*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true
library(dplyr)
library(stringr)

squid_games <- GLOBAL_TOP_10 |> 
  filter(str_detect(show_title, "Squid Game")) |> 
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  mutate(total_hours = format(total_hours, big.mark = ",", scientific = FALSE))
```
Among the 3 seasons being released from 2021 to 2025, *Squid Games* had a total viewership of **`r squid_games$total_hours`**  total hours.

## *Red Notice Total Views*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

library(dplyr)
library(lubridate)

# Calculate Red Notice total viewing hours in its debut year (2021)
red_notice <- GLOBAL_TOP_10 |>
  filter(show_title == "Red Notice", year(week) == 2021) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  mutate(approx_views = total_hours / (1 + 58/60)) |>
  mutate(
    total_hours = format(total_hours, big.mark = ",", scientific = FALSE),
    approx_views = format(approx_views, big.mark = ",", scientific = FALSE)
  )
```
In 2021, the movie **Red Notice** had **`r red_notice$approx_views`** total views. 

## *Films That Reached #1 in the US But Did Not Debut There*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

library(dplyr)
library(DT)

us_films_count <- COUNTRY_TOP_10 |>
  filter(country_name == "United States", category == "Films") |>
  group_by(show_title) |>
  summarise(
    debut_ranking = weekly_rank[which.min(week)],
    highest_rank = min(weekly_rank),
    debut_date = max(week),
    .groups = "drop"
  ) |>
  filter(debut_ranking > 1, highest_rank == 1) |>
  arrange(desc(debut_date))

datatable(
  us_films_count,
  options = list(searching = FALSE, info = FALSE),
  caption = "Films That Rose to #1 After Their US Debut",
  colnames = c('Show Title', 'Debut Ranking', 'Highest Rank', 'Debut Date')
)

# Isolate KPOP Demon Hunters
 kpop_film_name <- us_films_count |>
  filter(grepl("Demon Hunters", show_title)) |>
  pull(show_title)
```
In the US, there were **`r nrow(us_films_count)`** films that reached Number 1 but did not originally debut there. The most recent film to hit this milestone is **`r kpop_film_name`**.

## *TV Show/Season That Hit the Top 10 in the Most Countries in Its Debut Week*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

tv_show_debuts <- COUNTRY_TOP_10 |>
  filter(str_detect(category, "TV")) |>
  group_by(show_title) |>
  summarise(
    debut_week = min(week),
    countries_count = n_distinct(country_name),
    .groups = "drop"
  ) |>
  arrange(desc(countries_count)) |>
  slice(1)

```
The TV show, **`r tv_show_debuts$show_title`** was created in South Korea and released on **`r tv_show_debuts$debut_week`**. It hit the top 10 for **`r tv_show_debuts$countries_count`** countries during its debut week. 

# **Netflix Is Everywhere And We Can't Escape It**
<div style="text-align: center;">
  <img src="https://tenor.com/0KPB.gif" alt="GIF" width="500">
</div>

## *Watch Out Everyone, The Story In Hawkins Is Finally Coming To An End!*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

# Stranger Things Total Viewership For All Seasons
library(dplyr)
library(stringr)

stranger_things <- GLOBAL_TOP_10 |>
  filter(str_detect(show_title, "Stranger Things")) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  mutate(total_hours = format(total_hours, big.mark = ",", scientific = FALSE))


  
# Stranger Things Top 10 First Season Weeks
stranger_things_top_10 <- GLOBAL_TOP_10 |>
  filter(show_title == "Stranger Things") |>                    
  summarise(max_weeks = max(cumulative_weeks_in_top_10, na.rm = TRUE)) |> 
  pull(max_weeks)
 

# Stranger Things Appearances In Other Countries
library(dplyr)
stranger_things_countries <- COUNTRY_TOP_10 |>
  filter(show_title == "Stranger Things", category == "TV") |>
  summarise(total_countries = n_distinct(country_name))

# Bridgerton Total Viewership
bridgerton_viewership <- GLOBAL_TOP_10 |>
  filter(str_detect(show_title, "Bridgerton")) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  mutate(total_hours = format(total_hours, big.mark = ",", scientific = FALSE))

```

Renew your Netflix memberships folks because *Stranger Things* is coming back for its fifth and final season, and we cannot wait for what is going to unfold in the town of Hawkins, Indiana. From Demogorgons to catchy tunes, secret lab experiments to retro '80s vibes, the show has established a solid fan base across the globe. 

Releasing its first season in 2022, the show managed to stay cemented at Netflix's Global Top 10 for **`r stranger_things_top_10`** weeks, illustrating how truly addicting the show is. 

Since the release of all four seasons, it has garnered a total of **`r stranger_things$total_hours`** viewership hours which defeated the series *Bridgerton*, which had **`r bridgerton_viewership$total_hours`** viewership hours. As popular it may be in the United States, the hit show is even more popular in other countries. It managed to appear in **`r stranger_things_countries$total_countries`** different countries â€” *Stranger Things* isn't just loved by the Americans, its loved around the world! 

## *Step Aside Hollywood Because You're Getting Taken Over By Our Friends From India!*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

library(dplyr)
library(scales)
library(DT)

top_10_hindi_movies <- GLOBAL_TOP_10 |>
  filter(category == "Films (Non-English)" & grepl("Hindi", show_title)) |>
  filter(!is.na(weekly_hours_viewed)) |>
  group_by(`Show Title` = show_title) |>
  summarise(
    `Total Hours Viewed` = sum(weekly_hours_viewed, na.rm = TRUE),
    `Weeks in Top 10` = sum(cumulative_weeks_in_top_10, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(desc(`Total Hours Viewed`)) |>
  slice_head(n = 10) |>
  mutate(`Total Hours Viewed` = comma(`Total Hours Viewed`))
datatable(
  top_10_hindi_movies,
  options = list(
    pageLength = 10,
    searching = FALSE,
    info = FALSE
  ),
  caption = "Top 10 Hindi Films In India"
)

# Isolate RRR From Top 10 List For Viewership Hours
rrr_hours <- top_10_hindi_movies |>
  filter(grepl("RRR", `Show Title`)) |>
  pull(`Total Hours Viewed`)

# Isolate RRR From Top 10 List For Weeks In Top 10
rrr_weeks <- GLOBAL_TOP_10 |>
  filter(grepl("RRR", show_title)) |>
  summarise(total = sum(cumulative_weeks_in_top_10, na.rm = TRUE)) |>
  pull(total) |>
  format(big.mark = ",", scientific = FALSE)

# Total Viewership Hours of Top 10 Hindi Films
total_hindi_hours <- GLOBAL_TOP_10 |>
  filter(category == "Films (Non-English)" & grepl("Hindi", show_title)) |>
  filter(!is.na(weekly_hours_viewed)) |>
  group_by(show_title) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop") |>
  arrange(desc(total_hours)) |>
  slice_head(n = 10) |>
  summarise(grand_total = sum(total_hours)) |>
  pull(grand_total) |>
  format(big.mark = ",", scientific = FALSE)
```
Bollywood is taking over Netflix's algorithm and we're not complaining anytime soon. 

The Hindi film *RRR*, which was released in 2022, garnered so much traction on Netflix that it has approximately **`r rrr_hours`** total hour views currently and spent **`r rrr_weeks` weeks** on the Global Top 10 List. On top of those incredible numbers, they also managed to win an Oscar for Best Original Song for their "Naatu Naatu". These achievements were monumental for India, as both Netflix and the Academy Awards are closely followed, marking a proud moment for Indian audiences on the global stage.

The top 10 Hindi films combined from the Global Top 10 has **`r total_hindi_hours`** viewership hours which shows just how much India is a major market for Netflix. With these numbers increasing, global recognition of Bollywood Film and TV is not far out of reach. Bollywood tell their stories through the art of singing and dancing, something that Hollywood has been slowly trying to integrate. 

## *Dearest Gentle Reader, It Has Come To My Attention That Season 4 May Be On Its Way!*
```{r}
#| echo: true
#| message: false
#| warning: false
#| codefold: true

library(dplyr)
library(stringr)

# Bridgerton Total Viewership
bridgerton_viewership <- GLOBAL_TOP_10 |>
  filter(str_detect(show_title, "Bridgerton")) |>
  summarise(total_hours = sum(weekly_hours_viewed, na.rm = TRUE)) |>
  mutate(total_hours = format(total_hours, big.mark = ",", scientific = FALSE))


# Bridgerton Top 10
bridgerton_top_10 <- GLOBAL_TOP_10 |>
  filter(show_title == "Bridgerton") |>                    
  summarise(max_weeks = max(cumulative_weeks_in_top_10, na.rm = TRUE)) |> 
  pull(max_weeks)
 

# Bridgerton Viewership For Each Season
library(dplyr)
library(DT)
library(scales)

bridgerton_seasons_views <- GLOBAL_TOP_10 %>%
  filter(show_title == "Bridgerton") %>%
  group_by(season_title) %>%
  summarise(
    `Total Hours Viewership` = sum(weekly_hours_viewed, na.rm = TRUE),
    `Weeks in Top 10` = sum(cumulative_weeks_in_top_10, na.rm = TRUE),
    .groups = "drop"
  ) %>%
   mutate(`Total Hours Viewership` = comma(`Total Hours Viewership`))

datatable(bridgerton_seasons_views,
          options = list(searching = FALSE, paging = FALSE, info = FALSE),
          caption = "Bridgerton Viewership For All Three Seasons")
```
The hit regency period drama ***Bridgerton*** is coming back for its fourth season and fans are wondering if our eligible bachelor, Benedict Bridgerton, will finally find his match. From ball gowns on the dance floor to finding the diamonds of the season, its hard not to fall in love with this show at first glance. 

Debuting its first season in 2020, fans were immediately captivated by the sizzling chemistry between the Duke of Hastings and the diamond of the season, Daphne Bridgerton. Since the release of all three seasons, the hit show has amassed a total of **`r bridgerton_viewership$total_hours`** viewership hours. The debut season had a total of **`r filter(bridgerton_seasons_views, season_title == "Bridgerton: Season 1")$'Total Hours Viewership'` viewership hours**. Season 2 followed closely and had the largest amount of total hours of viewership which was **`r filter(bridgerton_seasons_views, season_title == "Bridgerton: Season 2")$'Total Hours Viewership'`**. The third season, which was released in 2024, had a total of **`r filter(bridgerton_seasons_views, season_title == "Bridgerton: Season 3")$'Total Hours Viewership'` viewership hours**. 

Due to its immense popularity, the show even managed to snag a spot on the Global Top 10 for **`r bridgerton_top_10`** weeks, which was spread amongst the three seasons. *Bridgerton* show creater, Shonda Rhimes, has teased the release date of season four to be early next year and fans cannot wait any longer.

The ton has no idea what *Benedict Bridgerton* has up his sleeves, but Lady Whistledown won't be kept quiet for long.  